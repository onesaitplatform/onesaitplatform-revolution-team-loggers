{"noteParams":{},"angularObjects":{"sh:shared_process":[],"python3:shared_process":[],"spark:shared_process":[]},"ospInfo":{"owner":"teamloggers","authorizations":[]},"name":"loggers_realtime","noteForms":{},"id":"2EQGAZ6US","paragraphs":[{"jobName":"paragraph_1570276431056_1895365413","settings":{"params":{},"forms":{}},"dateFinished":"2019-10-05 11:55:42.616","progressUpdateIntervalMs":500,"dateUpdated":"2019-10-08 08:07:41.359","dateCreated":"2019-10-05 11:53:51.056","dateStarted":"2019-10-05 11:55:31.928","text":"%sh\npip install pandas\npip install onesaitplatform-client-services\npip install plotly\npip install watchdog\npython --version","id":"20191005-115351_2090127960","user":"user1","config":{"lineNumbers":false,"editorSetting":{"completionSupport":false,"language":"sh","completionKey":"TAB","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/sh","fontSize":9,"results":{},"enabled":true},"results":{"msg":[{"data":"DEPRECATION: Python 2.7 will reach the end of its life on January 1st, 2020. Please upgrade your Python as Python 2.7 won't be maintained after that date. A future version of pip will drop support for Python 2.7. More details about Python 2 support in pip, can be found at https://pip.pypa.io/en/latest/development/release-process/#python-2-support\nRequirement already satisfied: virtualenv in /opt/conda/lib/python2.7/site-packages (16.7.5)\nAlready using interpreter /usr/bin/python3\nUsing base prefix '/usr'\nNew python executable in /zeppelin/loggers/bin/python3\nNot overwriting existing python script /zeppelin/loggers/bin/python (you must use /zeppelin/loggers/bin/python3)\nInstalling setuptools, pip, wheel...\ndone.\nRunning virtualenv with interpreter /usr/bin/python3\nRequirement already satisfied: pandas in ./loggers/lib/python3.5/site-packages (0.24.2)\nRequirement already satisfied: numpy>=1.12.0 in ./loggers/lib/python3.5/site-packages (from pandas) (1.17.2)\nRequirement already satisfied: pytz>=2011k in ./loggers/lib/python3.5/site-packages (from pandas) (2019.2)\nRequirement already satisfied: python-dateutil>=2.5.0 in ./loggers/lib/python3.5/site-packages (from pandas) (2.8.0)\nRequirement already satisfied: six>=1.5 in ./loggers/lib/python3.5/site-packages (from python-dateutil>=2.5.0->pandas) (1.12.0)\nRequirement already satisfied: onesaitplatform-client-services in ./loggers/lib/python3.5/site-packages (1.2.3)\nRequirement already satisfied: requests in ./loggers/lib/python3.5/site-packages (from onesaitplatform-client-services) (2.22.0)\nRequirement already satisfied: paho-mqtt in ./loggers/lib/python3.5/site-packages (from onesaitplatform-client-services) (1.4.0)\nRequirement already satisfied: six in ./loggers/lib/python3.5/site-packages (from onesaitplatform-client-services) (1.12.0)\nRequirement already satisfied: idna<2.9,>=2.5 in ./loggers/lib/python3.5/site-packages (from requests->onesaitplatform-client-services) (2.8)\nRequirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in ./loggers/lib/python3.5/site-packages (from requests->onesaitplatform-client-services) (1.25.6)\nRequirement already satisfied: certifi>=2017.4.17 in ./loggers/lib/python3.5/site-packages (from requests->onesaitplatform-client-services) (2019.9.11)\nRequirement already satisfied: chardet<3.1.0,>=3.0.2 in ./loggers/lib/python3.5/site-packages (from requests->onesaitplatform-client-services) (3.0.4)\nRequirement already satisfied: plotly in ./loggers/lib/python3.5/site-packages (4.1.1)\nRequirement already satisfied: six in ./loggers/lib/python3.5/site-packages (from plotly) (1.12.0)\nRequirement already satisfied: retrying>=1.3.3 in ./loggers/lib/python3.5/site-packages (from plotly) (1.3.3)\nRequirement already satisfied: watchdog in ./loggers/lib/python3.5/site-packages (0.9.0)\nRequirement already satisfied: PyYAML>=3.10 in ./loggers/lib/python3.5/site-packages (from watchdog) (5.1.2)\nRequirement already satisfied: argh>=0.24.1 in ./loggers/lib/python3.5/site-packages (from watchdog) (0.26.2)\nRequirement already satisfied: pathtools>=0.1.1 in ./loggers/lib/python3.5/site-packages (from watchdog) (0.1.2)\nPython 3.5.2\n","type":"TEXT"}],"code":"SUCCESS"},"apps":[],"status":"FINISHED"},{"jobName":"paragraph_1570400633333_1856627144","settings":{"params":{},"forms":{}},"dateFinished":"2019-10-07 09:32:32.791","progressUpdateIntervalMs":500,"dateUpdated":"2019-10-07 09:32:29.059","dateCreated":"2019-10-06 22:23:53.333","dateStarted":"2019-10-07 09:32:29.070","text":"%sh\npip3 install pygtail","id":"20191006-222353_1615445199","user":"user1","config":{"editorSetting":{"completionSupport":false,"language":"sh","completionKey":"TAB","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/sh","fontSize":9,"results":{},"enabled":true},"results":{"msg":[{"data":"Requirement already satisfied: pygtail in /usr/local/lib/python3.5/dist-packages (0.11.0)\n","type":"TEXT"}],"code":"SUCCESS"},"apps":[],"status":"FINISHED"},{"jobName":"paragraph_1570454379178_-1896220326","settings":{"params":{},"forms":{}},"dateFinished":"2019-10-08 08:21:05.873","progressUpdateIntervalMs":500,"dateUpdated":"2019-10-08 08:21:05.756","dateCreated":"2019-10-07 13:19:39.178","dateStarted":"2019-10-08 08:21:05.782","text":"%python3\r\n#!/usr/bin/python -tt\r\n# -*- coding: utf-8 -*-\r\n\r\n# pygtail - a python \"port\" of logtail2\r\n# Copyright (C) 2011 Brad Greenlee <brad@footle.org>\r\n#\r\n# Derived from logcheck <http://logcheck.org>\r\n# Copyright (C) 2003 Jonathan Middleton <jjm@ixtab.org.uk>\r\n# Copyright (C) 2001 Paul Slootman <paul@debian.org>\r\n#\r\n# This program is free software; you can redistribute it and/or modify\r\n# it under the terms of the GNU General Public License as published by\r\n# the Free Software Foundation; either version 2 of the License, or\r\n# (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n# GNU General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU General Public License\r\n# along with this program; if not, write to the Free Software\r\n# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\r\n\r\nfrom __future__ import print_function\r\nfrom os import fstat, stat\r\nimport os\r\nfrom os.path import exists, getsize\r\nimport sys\r\nimport glob\r\nimport gzip\r\nfrom optparse import OptionParser\r\n\r\n__version__ = '0.11.0'\r\n\r\n\r\nPY3 = sys.version_info[0] == 3\r\n\r\nif PY3:\r\n    text_type = str\r\nelse:\r\n    text_type = unicode\r\n\r\n\r\ndef force_text(s, encoding='utf-8', errors='strict'):\r\n    if isinstance(s, text_type):\r\n        return s\r\n    return s.decode(encoding, errors)\r\n\r\n\r\nclass Pygtail(object):\r\n    \"\"\"\r\n    Creates an iterable object that returns only unread lines.\r\n    Keyword arguments:\r\n    offset_file   File to which offset data is written (default: <logfile>.offset).\r\n    paranoid      Update the offset file every time we read a line (as opposed to\r\n                  only when we reach the end of the file (default: False))\r\n    every_n       Update the offset file every n'th line (as opposed to only when\r\n                  we reach the end of the file (default: 0))\r\n    on_update     Execute this function when offset data is written (default False)\r\n    copytruncate  Support copytruncate-style log rotation (default: True)\r\n    log_patterns  List of custom rotated log patterns to match (default: None)\r\n    full_lines    Only log when line ends in a newline `\\n` (default: False)\r\n    \"\"\"\r\n    def __init__(self, filename, offset_file=None, paranoid=False, copytruncate=True,\r\n                 every_n=0, on_update=False, read_from_end=False, log_patterns=None, full_lines=False):\r\n        self.filename = filename\r\n        self.paranoid = paranoid\r\n        self.every_n = every_n\r\n        self.on_update = on_update\r\n        self.copytruncate = copytruncate\r\n        self.read_from_end = read_from_end\r\n        self.log_patterns = log_patterns\r\n        self._full_lines = full_lines\r\n        self._offset_file = offset_file or \"%s.offset\" % self.filename\r\n        self._offset_file_inode = 0\r\n        self._offset = 0\r\n        self._since_update = 0\r\n        self._fh = None\r\n        self._rotated_logfile = self._check_rotated_filename_candidates()\r\n\r\n        # if offset file exists and non-empty, open and parse it\r\n        if exists(self._offset_file) and getsize(self._offset_file):\r\n            offset_fh = open(self._offset_file, \"r\")\r\n            (self._offset_file_inode, self._offset) = \\\r\n                [int(line.strip()) for line in offset_fh]\r\n            offset_fh.close()\r\n            if self._offset_file_inode != stat(self.filename).st_ino or \\\r\n                    stat(self.filename).st_size < self._offset:\r\n                # The inode has changed or filesize has reduced so the file\r\n                # might have been rotated.\r\n                # Look for the rotated file and process that if we find it.\r\n                self._rotated_logfile = self._determine_rotated_logfile()\r\n\r\n    def __del__(self):\r\n        if self._filehandle():\r\n            self._filehandle().close()\r\n\r\n    def __iter__(self):\r\n        return self\r\n\r\n    def next(self):\r\n        \"\"\"\r\n        Return the next line in the file, updating the offset.\r\n        \"\"\"\r\n        try:\r\n            line = self._get_next_line()\r\n        except StopIteration:\r\n            # we've reached the end of the file; if we're processing the\r\n            # rotated log file or the file has been renamed, we can continue with the actual file; otherwise\r\n            # update the offset file\r\n            if self._is_new_file():\r\n                self._rotated_logfile = None\r\n                self._fh.close()\r\n                self._offset = 0\r\n                # open up current logfile and continue\r\n                try:\r\n                    line = self._get_next_line()\r\n                except StopIteration:  # oops, empty file\r\n                    self._update_offset_file()\r\n                    raise\r\n            else:\r\n                self._update_offset_file()\r\n                raise\r\n\r\n        if self.paranoid:\r\n            self._update_offset_file()\r\n        elif self.every_n and self.every_n <= self._since_update:\r\n            self._update_offset_file()\r\n\r\n        return line\r\n\r\n    def __next__(self):\r\n        \"\"\"`__next__` is the Python 3 version of `next`\"\"\"\r\n        return self.next()\r\n\r\n    def readlines(self):\r\n        \"\"\"\r\n        Read in all unread lines and return them as a list.\r\n        \"\"\"\r\n        return [line for line in self]\r\n\r\n    def read(self):\r\n        \"\"\"\r\n        Read in all unread lines and return them as a single string.\r\n        \"\"\"\r\n        lines = self.readlines()\r\n        if lines:\r\n            try:\r\n                return ''.join(lines)\r\n            except TypeError:\r\n                return ''.join(force_text(line) for line in lines)\r\n        else:\r\n            return None\r\n\r\n    def _is_closed(self):\r\n        if not self._fh:\r\n            return True\r\n        try:\r\n            return self._fh.closed\r\n        except AttributeError:\r\n            if isinstance(self._fh, gzip.GzipFile):\r\n                # python 2.6\r\n                return self._fh.fileobj is None\r\n            else:\r\n                raise\r\n\r\n    def _filehandle(self):\r\n        \"\"\"\r\n        Return a filehandle to the file being tailed, with the position set\r\n        to the current offset.\r\n        \"\"\"\r\n        if not self._fh or self._is_closed():\r\n            filename = self._rotated_logfile or self._check_rotated_filename_candidates()\r\n            print(filename)\r\n            if filename.endswith('.gz'):\r\n                self._fh = gzip.open(filename, 'r')\r\n            else:\r\n                self._fh = open(filename, \"r\", 1)\r\n            if self.read_from_end and not exists(self._offset_file):\r\n                self._fh.seek(0, os.SEEK_END)\r\n            else:\r\n                self._fh.seek(self._offset)\r\n\r\n        return self._fh\r\n\r\n    def _update_offset_file(self):\r\n        \"\"\"\r\n        Update the offset file with the current inode and offset.\r\n        \"\"\"\r\n        if self.on_update:\r\n            self.on_update()\r\n        offset = self._filehandle().tell()\r\n        inode = stat(self.filename).st_ino\r\n        fh = open(self._offset_file, \"w\")\r\n        fh.write(\"%s\\n%s\\n\" % (inode, offset))\r\n        fh.close()\r\n        self._since_update = 0\r\n\r\n    def _determine_rotated_logfile(self):\r\n        \"\"\"\r\n        We suspect the logfile has been rotated, so try to guess what the\r\n        rotated filename is, and return it.\r\n        \"\"\"\r\n        rotated_filename = self._check_rotated_filename_candidates()\r\n        if rotated_filename and exists(rotated_filename):\r\n            if stat(rotated_filename).st_ino == self._offset_file_inode:\r\n                return rotated_filename\r\n\r\n            # if the inode hasn't changed, then the file shrank; this is expected with copytruncate,\r\n            # otherwise print a warning\r\n            if stat(self.filename).st_ino == self._offset_file_inode:\r\n                if self.copytruncate:\r\n                    return rotated_filename\r\n                else:\r\n                    sys.stderr.write(\r\n                        \"[pygtail] [WARN] file size of %s shrank, and copytruncate support is \"\r\n                        \"disabled (expected at least %d bytes, was %d bytes).\\n\" %\r\n                        (self.filename, self._offset, stat(self.filename).st_size))\r\n\r\n        return None\r\n\r\n    def _check_rotated_filename_candidates(self):\r\n        \"\"\"\r\n        Check for various rotated logfile filename patterns and return the first\r\n        match we find.\r\n        \"\"\"\r\n        # savelog(8)\r\n        candidate = \"%s.0\" % self.filename\r\n        if (exists(candidate) and exists(\"%s.1.gz\" % self.filename) and\r\n            (stat(candidate).st_mtime > stat(\"%s.1.gz\" % self.filename).st_mtime)):\r\n            return candidate\r\n\r\n        # logrotate(8)\r\n        # with delaycompress\r\n        candidate = \"%s.1\" % self.filename\r\n        if exists(candidate):\r\n            return candidate\r\n\r\n        # without delaycompress\r\n        candidate = \"%s.1.gz\" % self.filename\r\n        if exists(candidate):\r\n            return candidate\r\n\r\n        rotated_filename_patterns = [\r\n            # logrotate dateext rotation scheme - `dateformat -%Y%m%d` + with `delaycompress`\r\n            \"%s-[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]\",\r\n            # logrotate dateext rotation scheme - `dateformat -%Y%m%d` + without `delaycompress`\r\n            \"%s-[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9].gz\",\r\n            # logrotate dateext rotation scheme - `dateformat -%Y%m%d-%s` + with `delaycompress`\r\n            \"%s-[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]-[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]\",\r\n            # logrotate dateext rotation scheme - `dateformat -%Y%m%d-%s` + without `delaycompress`\r\n            \"%s-[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]-[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9].gz\",\r\n            # for TimedRotatingFileHandler\r\n            \"%s.[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]\",\r\n        ]\r\n        if self.log_patterns:\r\n            rotated_filename_patterns.extend(self.log_patterns)\r\n\r\n        # break into directory and filename components to support cases where the\r\n        # the file is prepended as part of rotation\r\n        file_dir, rel_filename = os.path.split(self.filename)\r\n        for rotated_filename_pattern in rotated_filename_patterns:\r\n            candidates = glob.glob(os.path.join(file_dir, rotated_filename_pattern % rel_filename))\r\n            if candidates:\r\n                candidates.sort()\r\n                print(candidates[-1])\r\n                return candidates[-1]  # return most recent\r\n\r\n        # no match\r\n        return None\r\n\r\n    def _is_new_file(self):\r\n        print('new file', self._rotated_logfile)\r\n        # Processing rotated logfile or at the end of current file which has been renamed\r\n        return self._rotated_logfile or \\\r\n               self._filehandle().tell() == fstat(self._filehandle().fileno()).st_size and \\\r\n               fstat(self._filehandle().fileno()).st_ino != stat(self._check_rotated_filename_candidates()).st_ino\r\n\r\n    def _get_next_line(self):\r\n        curr_offset = self._filehandle().tell()\r\n        line = self._filehandle().readline()\r\n        if self._full_lines:\r\n            if not line.endswith('\\n'):\r\n                self._filehandle().seek(curr_offset)\r\n                raise StopIteration\r\n        if not line:\r\n            raise StopIteration\r\n        self._since_update += 1\r\n        return line\r\n    ","id":"20191007-131939_1287391480","user":"user1","config":{"lineNumbers":true,"editorSetting":{"completionSupport":true,"language":"python","completionKey":"TAB","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"results":{"msg":[],"code":"SUCCESS"},"apps":[],"status":"FINISHED"},{"jobName":"paragraph_1570276571733_1589514539","settings":{"params":{},"forms":{}},"dateFinished":"2019-10-07 14:21:54.221","progressUpdateIntervalMs":500,"dateUpdated":"2019-10-08 08:52:49.905","dateCreated":"2019-10-05 11:56:11.733","dateStarted":"2019-10-07 14:21:54.166","text":"%python3\nfrom onesaitplatform.iotbroker import DigitalClient\nimport threading\nimport pandas as pd\nfrom datetime import datetime\nimport re\n\nHOST = 'lab.onesaitplatform.com'\nPORT = 443\nIOT_CLIENT = 'loggers_anomalies'\nIOT_CLIENT_TOKEN = 'fcf9a850fcad4e9f9a5319aa0da37ad0'\n\nclient = DigitalClient(HOST, port=PORT, iot_client=IOT_CLIENT, iot_client_token=IOT_CLIENT_TOKEN)\nclient.join()\n\nlog_path = '/tmp/logs'\n\nassets = ['onesaitplatform-semantic-inf-broker', 'onesaitplatform-iot-broker', 'onesaitplatform-api-manager', 'onesaitplatform-control-panel']\nevent_regex = re.compile('(?P<component>[\\w-]+) (?P<hour>\\d{2}):\\d{2}:\\d{2}\\.\\d+ \\[.+?\\] (?P<severity>\\w+)\\s')\nmodels = pd.read_pickle('/zeppelin/loggers/quantile.pickle')\ndef monitoring(log):\n    model = models.loc[models['component']==log]\n    for line in Pygtail(os.path.join('/tmp/logs', log), log_patterns=['%s-[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]*.log'], full_lines=True):\n        if event_regex.match(line):\n            data = event_regex.match(line).groupdict()\n            date = datetime.now().replace(hour=data['hour'], minute=0, seconds=0).isoformat()\n            query_match = '{\"loggers_anomalies.component\":\"%s\", loggers_anomalies.severity\":\"%s\", loggers_anomalies.date\":\"%s\", loggers_anomalies.timestamp\":\"%s, loggers_anomalies.hour\":\"%s}' % (data['component'], data['severity'], date.split('T')[0], date, data['hour'])\n            ok_query, results_query = client.query(ontology=\"loggers_anomalies\", query='db.loggers_anomalies.update(' + query_match + ', {\"$inc\": {\"loggers_anomalies.counter\": 1}}, {upsert:true})', querry_type='NATIVE')\n            ok_query, results_query = client.query(ontology=\"loggers_anomalies\", query='db.loggers_anomalies.find(' + query_match + ')', querry_type='NATIVE')\n            current_counter = results_query['loggers_anomalies']['counter']\n            current_quantile = model.loc[models['severity']==data['severity']].loc[models['hour']==data['hour']]\n            if current_quantile and any(current_quantile < current_counter) or model.loc[models['severity']==data['severity']].quantile(0.9)*1.2 < current_counter:\n                anomaly = {'timestamp': datetime.now().isoformat(), 'component': log, 'anomaly': 'Exceeded quantile threshold at %s for severity %s' %(data['hour'], data['severity']}\n                ok_query, results_query = client.insert(ontology=\"loggers_anomalies\", list_data=[{'loggers_anomalies': anomaly}])\n\nthread_list = []\n\nfor log in assets:\n    t = threading.Thread(target=monitoring, args=(log,))\n    thread_list.append(t)\n    thread.start()\n\nfor thread in thread_list:\n    thread.join()\n\nprint(\"Done\")\n","id":"20191005-115611_1605888552","user":"user1","config":{"editorSetting":{"completionSupport":true,"language":"python","completionKey":"TAB","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"results":{"msg":[{"data":"init\n/tmp/logs/onesaitplatform-semantic-inf-broker-2019-10-07-11_9.log\n","type":"TEXT"},{"data":"Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-2787134796752447841.py\", line 313, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 1, in <module>\nValueError: too many values to unpack (expected 2)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/zeppelin_python-2787134796752447841.py\", line 320, in <module>\n    raise Exception(traceback.format_exc())\nException: Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-2787134796752447841.py\", line 313, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 1, in <module>\nValueError: too many values to unpack (expected 2)\n\n","type":"TEXT"}],"code":"ERROR"},"apps":[],"status":"ERROR"},{"jobName":"paragraph_1570451001985_-1895070468","settings":{"params":{},"forms":{}},"dateFinished":"2019-10-08 08:53:01.861","progressUpdateIntervalMs":500,"dateUpdated":"2019-10-08 08:53:01.710","dateCreated":"2019-10-07 12:23:21.985","dateStarted":"2019-10-08 08:53:01.752","text":"%python3\nfrom onesaitplatform.iotbroker import DigitalClient\nimport threading\nfrom datetime import datetime\nimport re\n\nHOST = 'lab.onesaitplatform.com'\nPORT = 443\nIOT_CLIENT = 'loggers_anomalies'\nIOT_CLIENT_TOKEN = 'fcf9a850fcad4e9f9a5319aa0da37ad0'\n\nlog_path = '/tmp/logs'\nprint(datetime.now())\n\nclient = DigitalClient(HOST, port=PORT, iot_client=IOT_CLIENT, iot_client_token=IOT_CLIENT_TOKEN)\nclient.join()\n\nassets = ['onesaitplatform-semantic-inf-broker', 'onesaitplatform-iot-broker', 'onesaitplatform-api-manager', 'onesaitplatform-control-panel']\nevent_regex = re.compile('(?P<component>[\\w-]+) (?P<hour>\\d{2}):\\d{2}:\\d{2}\\.\\d+ \\[.+?\\] (?P<severity>\\w+)\\s(?P<message>.+)')\ndef monitoring(log):\n    for line in Pygtail(os.path.join('/tmp/logs', log), log_patterns=['%s-[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]*.log'], full_lines=True):\n        if event_regex.match(line):\n            data = event_regex.match(line).groupdict()\n            if data['severity'] == 'ERROR':\n                error = {'timestamp': datetime.now().isoformat(), 'component': log, 'error': data['message']}\n                ok_query, results_query = client.insert(ontology=\"loggers_errors\", list_data=[{'loggers_errors': error}])\n                print(datetime.now(), error, ok_query)\n\nwhile True:\n    for component in assets:\n        monitoring(component)\n\nprint(\"Done\")\nclient.leave()","id":"20191007-122321_933852905","user":"user1","config":{"lineNumbers":true,"editorSetting":{"completionSupport":true,"language":"python","completionKey":"TAB","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"results":{"msg":[{"data":"2019-10-08 08:53:01.769815\nInfo - IotBrokerClient will be soon deprecated, please use DigitalClient instead\n","type":"TEXT"},{"data":"Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-8530104767907180744.py\", line 308, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 25, in <module>\n  File \"<stdin>\", line 16, in monitoring\nNameError: name 'Pygtail' is not defined\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/zeppelin_python-8530104767907180744.py\", line 320, in <module>\n    raise Exception(traceback.format_exc())\nException: Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-8530104767907180744.py\", line 308, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 25, in <module>\n  File \"<stdin>\", line 16, in monitoring\nNameError: name 'Pygtail' is not defined\n\n","type":"TEXT"}],"code":"ERROR"},"apps":[],"status":"ERROR"},{"jobName":"paragraph_1570521342169_369872967","settings":{"params":{},"forms":{}},"dateFinished":"2019-10-08 09:11:45.002","progressUpdateIntervalMs":500,"dateUpdated":"2019-10-08 08:54:44.570","dateCreated":"2019-10-08 07:55:42.169","dateStarted":"2019-10-08 08:54:44.598","text":"%python3\nfrom onesaitplatform.iotbroker import DigitalClient\nfrom datetime import datetime, date\nimport re\nimport glob\nimport os\n\nHOST = 'lab.onesaitplatform.com'\nPORT = 443\nIOT_CLIENT = 'loggers_anomalies'\nIOT_CLIENT_TOKEN = 'fcf9a850fcad4e9f9a5319aa0da37ad0'\nclient = DigitalClient(HOST, port=PORT, iot_client=IOT_CLIENT, iot_client_token=IOT_CLIENT_TOKEN)\nclient.join()\nlog_path = '/tmp/logs'\nprint(datetime.now())\n\nassets = ['onesaitplatform-semantic-inf-broker', 'onesaitplatform-iot-broker', 'onesaitplatform-api-manager', 'onesaitplatform-control-panel']\nrotation_pattern = '%s-[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]*.log'\nfilename_regex = re.compile('^(?P<source>[\\w-]+?)-(?P<date>\\d{4}-\\d{2}-\\d{2}).*\\.log$')\nevent_regex = re.compile('(?P<source>[\\w-]+) (?P<ts_raw>(?P<hour>\\d{2}):(?P<minute>\\d{2}):\\d{2}\\.\\d+) \\[.+?\\] (?P<severity>\\w+)\\s')\n\nfor component in assets:\n    for log_file in glob.glob(os.path.join(log_path, rotation_pattern % component)):\n        date = filename_regex.match(log_file.split('/')[-1]).group('date')\n        with open(log_file, 'r') as log_fd:\n            for line in log_fd:\n                if event_regex.match(line):\n                    data = event_regex.match(line).groupdict()\n                    if data['severity'] == 'ERROR':\n                        error = {'timestamp': date + 'T' + data['ts_raw'] + 'Z', 'component': component, 'error': line}\n                        ok_query, results_query = client.insert(ontology=\"loggers_errors\", list_data=[{'loggers_errors': error}])\n\nprint(\"Done\")\nclient.leave()","id":"20191008-075542_2126646388","user":"user1","config":{"editorSetting":{"completionSupport":true,"language":"python","completionKey":"TAB","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"results":{"msg":[{"data":"Info - IotBrokerClient will be soon deprecated, please use DigitalClient instead\n2019-10-08 08:54:44.666885\n","type":"TEXT"},{"data":"Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-8530104767907180744.py\", line 308, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 27, in <module>\n  File \"/usr/local/lib/python3.5/dist-packages/onesaitplatform/iotbroker/digitalclient.py\", line 449, in insert\n    response = self.raw_insert(ontology, list_data)\n  File \"/usr/local/lib/python3.5/dist-packages/onesaitplatform/iotbroker/digitalclient.py\", line 422, in raw_insert\n    response = self.call(RestMethods.POST.value, url, headers=headers, body=body)\n  File \"/usr/local/lib/python3.5/dist-packages/onesaitplatform/iotbroker/digitalclient.py\", line 490, in call\n    verify=not self.avoid_ssl_certificate, timeout=self.timeout, proxies=self.proxies)\n  File \"/usr/local/lib/python3.5/dist-packages/requests/api.py\", line 60, in request\n    return session.request(method=method, url=url, **kwargs)\n  File \"/usr/local/lib/python3.5/dist-packages/requests/sessions.py\", line 533, in request\n    resp = self.send(prep, **send_kwargs)\n  File \"/usr/local/lib/python3.5/dist-packages/requests/sessions.py\", line 646, in send\n    r = adapter.send(request, **kwargs)\n  File \"/usr/local/lib/python3.5/dist-packages/requests/adapters.py\", line 449, in send\n    timeout=timeout\n  File \"/usr/local/lib/python3.5/dist-packages/urllib3/connectionpool.py\", line 672, in urlopen\n    chunked=chunked,\n  File \"/usr/local/lib/python3.5/dist-packages/urllib3/connectionpool.py\", line 421, in _make_request\n    six.raise_from(e, None)\n  File \"<string>\", line 3, in raise_from\n  File \"/usr/local/lib/python3.5/dist-packages/urllib3/connectionpool.py\", line 416, in _make_request\n    httplib_response = conn.getresponse()\n  File \"/usr/lib/python3.5/http/client.py\", line 1213, in getresponse\n    response.begin()\n  File \"/usr/lib/python3.5/http/client.py\", line 307, in begin\n    version, status, reason = self._read_status()\n  File \"/usr/lib/python3.5/http/client.py\", line 268, in _read_status\n    line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n  File \"/usr/lib/python3.5/socket.py\", line 575, in readinto\n    return self._sock.recv_into(b)\n  File \"/usr/lib/python3.5/ssl.py\", line 929, in recv_into\n    return self.read(nbytes, buffer)\n  File \"/usr/lib/python3.5/ssl.py\", line 791, in read\n    return self._sslobj.read(len, buffer)\n  File \"/usr/lib/python3.5/ssl.py\", line 575, in read\n    v = self._sslobj.read(len, buffer)\n  File \"/tmp/zeppelin_python-8530104767907180744.py\", line 227, in handler_stop_signals\n    sys.exit(\"Got signal : \" + str(sig))\nSystemExit: Got signal : 2\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/zeppelin_python-8530104767907180744.py\", line 320, in <module>\n    raise Exception(traceback.format_exc())\nException: Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-8530104767907180744.py\", line 308, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 27, in <module>\n  File \"/usr/local/lib/python3.5/dist-packages/onesaitplatform/iotbroker/digitalclient.py\", line 449, in insert\n    response = self.raw_insert(ontology, list_data)\n  File \"/usr/local/lib/python3.5/dist-packages/onesaitplatform/iotbroker/digitalclient.py\", line 422, in raw_insert\n    response = self.call(RestMethods.POST.value, url, headers=headers, body=body)\n  File \"/usr/local/lib/python3.5/dist-packages/onesaitplatform/iotbroker/digitalclient.py\", line 490, in call\n    verify=not self.avoid_ssl_certificate, timeout=self.timeout, proxies=self.proxies)\n  File \"/usr/local/lib/python3.5/dist-packages/requests/api.py\", line 60, in request\n    return session.request(method=method, url=url, **kwargs)\n  File \"/usr/local/lib/python3.5/dist-packages/requests/sessions.py\", line 533, in request\n    resp = self.send(prep, **send_kwargs)\n  File \"/usr/local/lib/python3.5/dist-packages/requests/sessions.py\", line 646, in send\n    r = adapter.send(request, **kwargs)\n  File \"/usr/local/lib/python3.5/dist-packages/requests/adapters.py\", line 449, in send\n    timeout=timeout\n  File \"/usr/local/lib/python3.5/dist-packages/urllib3/connectionpool.py\", line 672, in urlopen\n    chunked=chunked,\n  File \"/usr/local/lib/python3.5/dist-packages/urllib3/connectionpool.py\", line 421, in _make_request\n    six.raise_from(e, None)\n  File \"<string>\", line 3, in raise_from\n  File \"/usr/local/lib/python3.5/dist-packages/urllib3/connectionpool.py\", line 416, in _make_request\n    httplib_response = conn.getresponse()\n  File \"/usr/lib/python3.5/http/client.py\", line 1213, in getresponse\n    response.begin()\n  File \"/usr/lib/python3.5/http/client.py\", line 307, in begin\n    version, status, reason = self._read_status()\n  File \"/usr/lib/python3.5/http/client.py\", line 268, in _read_status\n    line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n  File \"/usr/lib/python3.5/socket.py\", line 575, in readinto\n    return self._sock.recv_into(b)\n  File \"/usr/lib/python3.5/ssl.py\", line 929, in recv_into\n    return self.read(nbytes, buffer)\n  File \"/usr/lib/python3.5/ssl.py\", line 791, in read\n    return self._sslobj.read(len, buffer)\n  File \"/usr/lib/python3.5/ssl.py\", line 575, in read\n    v = self._sslobj.read(len, buffer)\n  File \"/tmp/zeppelin_python-8530104767907180744.py\", line 227, in handler_stop_signals\n    sys.exit(\"Got signal : \" + str(sig))\nSystemExit: Got signal : 2\n\n","type":"TEXT"}],"code":"ERROR"},"apps":[],"status":"ABORT"},{"jobName":"paragraph_1570523365008_-208626716","settings":{"params":{},"forms":{}},"dateCreated":"2019-10-08 08:29:25.008","progressUpdateIntervalMs":500,"text":"%python3\n","id":"20191008-082925_1708061290","user":"user1","config":{},"dateUpdated":"2019-10-08 08:29:25.010","apps":[],"status":"READY"}],"config":{"isZeppelinNotebookCronEnable":false},"info":{}}