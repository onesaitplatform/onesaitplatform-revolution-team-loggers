{"noteParams":{},"angularObjects":{"sh:shared_process":[],"python3:shared_process":[],"spark:shared_process":[]},"ospInfo":{"owner":"teamloggers","authorizations":[]},"name":"loggers_quantile","noteForms":{},"id":"2ESD7M8UU","paragraphs":[{"jobName":"paragraph_1570472577197_905579724","settings":{"params":{},"forms":{}},"dateFinished":"2019-10-08 06:54:55.114","progressUpdateIntervalMs":500,"errorMessage":"org.apache.thrift.transport.TTransportException\n\tat org.apache.thrift.transport.TIOStreamTransport.read(TIOStreamTransport.java:132)\n\tat org.apache.thrift.transport.TTransport.readAll(TTransport.java:86)\n\tat org.apache.thrift.protocol.TBinaryProtocol.readAll(TBinaryProtocol.java:429)\n\tat org.apache.thrift.protocol.TBinaryProtocol.readI32(TBinaryProtocol.java:318)\n\tat org.apache.thrift.protocol.TBinaryProtocol.readMessageBegin(TBinaryProtocol.java:219)\n\tat org.apache.thrift.TServiceClient.receiveBase(TServiceClient.java:69)\n\tat org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Client.recv_interpret(RemoteInterpreterService.java:274)\n\tat org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Client.interpret(RemoteInterpreterService.java:258)\n\tat org.apache.zeppelin.interpreter.remote.RemoteInterpreter$4.call(RemoteInterpreter.java:233)\n\tat org.apache.zeppelin.interpreter.remote.RemoteInterpreter$4.call(RemoteInterpreter.java:229)\n\tat org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.callRemoteFunction(RemoteInterpreterProcess.java:135)\n\tat org.apache.zeppelin.interpreter.remote.RemoteInterpreter.interpret(RemoteInterpreter.java:228)\n\tat org.apache.zeppelin.notebook.Paragraph.jobRun(Paragraph.java:437)\n\tat org.apache.zeppelin.scheduler.Job.run(Job.java:188)\n\tat org.apache.zeppelin.scheduler.RemoteScheduler$JobRunner.run(RemoteScheduler.java:307)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n","dateUpdated":"2019-10-08 06:20:33.721","dateCreated":"2019-10-07 18:22:57.197","dateStarted":"2019-10-08 06:20:33.736","text":"%python3\nimport pandas as pd\nimport os\nimport watchdog\nimport re\n\n# Get log filenames and classify them\n\n#  filename pattern\nfilename_regex = re.compile('^(?P<source>[\\w-]+?)-(?P<date>\\d{4}-\\d{2}-\\d{2}).*\\.log$')\n\n#  generator iterating over log files that matches the filename_regex pattern and prefix\ndef iter_files(log_path='/tmp/logs', prefix='onesaitplatform'):\n    for file in os.listdir(log_path):\n        filename_data = filename_regex.match(file) if file.startswith(prefix) else None\n        if filename_data is not None:\n            filename_data = filename_data.groupdict()\n            yield filename_data, file\n\n# Save and classify logs\nonesait_logs = dict()\nfor file_data, file in iter_files():\n    onesait_logs.setdefault(file_data['source'], dict()).setdefault(file_data['date'], []).append(file)\n\nlog_path = '/tmp/logs'\n\n# Event pattern\nevent_regex = re.compile('(?P<source>[\\w-]+) (?P<ts_raw>(?P<hour>\\d{2}):(?P<minute>\\d{2}):\\d{2}\\.\\d+) \\[.+?\\] (?P<severity>\\w+)\\s')\nassets = ['onesaitplatform-semantic-inf-broker', 'onesaitplatform-iot-broker', 'onesaitplatform-api-manager', 'onesaitplatform-control-panel']\nonesait_logs = {k:v for k,v in onesait_logs.items() if k in assets}\nevents = list()\nmodel = pd.DataFrame()\nfor component, dates in onesait_logs.items():\n    df = pd.DataFrame()\n    for date in dates:\n        for file in dates[date]:\n            file_data = {'component': component, 'date': date}\n            if os.path.isfile(os.path.join(log_path, file)):\n                with open(os.path.join(log_path, file), 'r') as log_fd:\n                    for line in log_fd:\n                        event_data = event_regex.match(line)\n                        if event_data is not None:\n                            events.append({**file_data, **event_data.groupdict()})\n\n    df = pd.DataFrame(events)\n    if not df.empty:\n        df = df.groupby(['component', 'source', 'severity', 'hour', 'date']).size().reset_index().groupby(['severity', 'hour', 'component']).quantile(0.9).reset_index().rename(columns={0: 'quantile'})\n        df = df[df['severity'].isin(['INFO', 'ERROR', 'WARN', 'DEBUG'])]\n        model = model.append(df, ignore_index=True)\n        \n    print(component)\n\nmodel.to_pickle('/zeppelin/loggers/quantile.pickle')\n","id":"20191007-182257_856169794","user":"user1","config":{"editorSetting":{"completionSupport":true,"language":"python","completionKey":"TAB","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"results":{"msg":[{"data":"org.apache.thrift.transport.TTransportException\n\tat org.apache.thrift.transport.TIOStreamTransport.read(TIOStreamTransport.java:132)\n\tat org.apache.thrift.transport.TTransport.readAll(TTransport.java:86)\n\tat org.apache.thrift.protocol.TBinaryProtocol.readAll(TBinaryProtocol.java:429)\n\tat org.apache.thrift.protocol.TBinaryProtocol.readI32(TBinaryProtocol.java:318)\n\tat org.apache.thrift.protocol.TBinaryProtocol.readMessageBegin(TBinaryProtocol.java:219)\n\tat org.apache.thrift.TServiceClient.receiveBase(TServiceClient.java:69)\n\tat org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Client.recv_interpret(RemoteInterpreterService.java:274)\n\tat org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Client.interpret(RemoteInterpreterService.java:258)\n\tat org.apache.zeppelin.interpreter.remote.RemoteInterpreter$4.call(RemoteInterpreter.java:233)\n\tat org.apache.zeppelin.interpreter.remote.RemoteInterpreter$4.call(RemoteInterpreter.java:229)\n\tat org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.callRemoteFunction(RemoteInterpreterProcess.java:135)\n\tat org.apache.zeppelin.interpreter.remote.RemoteInterpreter.interpret(RemoteInterpreter.java:228)\n\tat org.apache.zeppelin.notebook.Paragraph.jobRun(Paragraph.java:437)\n\tat org.apache.zeppelin.scheduler.Job.run(Job.java:188)\n\tat org.apache.zeppelin.scheduler.RemoteScheduler$JobRunner.run(RemoteScheduler.java:307)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n","type":"TEXT"}],"code":"ERROR"},"apps":[],"status":"ABORT"}],"config":{"isZeppelinNotebookCronEnable":false},"info":{}}